upstream unicorn_<%= @app_name %> {
  server unix:/var/www/vhosts/<%= @app_name %>/httpdocs/current/tmp/sockets/unicorn.sock;
}

# Redirect for domain without www.
server {
    listen       80;
    server_name  <%= @app_name %>;
    rewrite   ^  http://www.<%= @app_name %>$request_uri?;
}

server {
  # Familiar HTTP settings
  listen 80;
  server_name www.<%= @app_name %>;

  root /var/www/vhosts/<%= @app_name %>/httpdocs/current/public;

  access_log /var/log/nginx/<%= @app_name %>.access.log;
  error_log /var/log/nginx/<%= @app_name %>.error.log;

  error_page   500 502 503 504 /500.html;
  client_max_body_size 50M;
  # First rewrite rule for handling maintenance page
  if (-f $document_root/system/maintenance.html) {
    rewrite ^(.*)$ /system/maintenance.html last;
    break;
  }
  location / {
    index index.html index.htm;
    # Forward information about the client and host
    # Otherwise our Rails app wouldn't have access to it
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_max_temp_file_size 0;

    if ($request_uri ~* "\.(ico|css|js|gif|jpe?g|png)\?[0-9]+$") {
        expires max;
        break;
    }

    if (-f $request_filename) {
      break;
    }
    # Directly serve cached pages
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }
    # Otherwise let Mongrel handle the request
    if (!-f $request_filename) {
      proxy_pass http://unicorn_<%= @app_name %>;
      break;
    }
  }
}
